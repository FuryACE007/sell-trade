import { Component, OnInit } from "@angular/core";
import { FormBuilder, FormGroup, Validators } from "@angular/forms";
import { Instrument } from "../models/instrument";
import { Trade } from "../models/trade";
import { FmtsService } from "../services/fmts.service";
import { Client } from "../models/client";
import { MatSnackBar } from "@angular/material/snack-bar";
import { InstrumentService } from "../services/instrument.service";
import { ClientService } from "../services/client.service";
import { Order } from "../models/order";

@Component({
  selector: "app-sell-trade",
  templateUrl: "./sell-trade.component.html",
  styleUrls: ["./sell-trade.component.css"],
})
export class SellTradeComponent implements OnInit {
  sellForm: FormGroup;
  client: Client | null = null;
  portfolioInstruments: Instrument[] = [];

  constructor(
    private formBuilder: FormBuilder,
    private fmtsService: FmtsService,
    private snackBar: MatSnackBar,
    private instrumentService: InstrumentService,
    private clientService: ClientService
  ) {
    this.sellForm = this.formBuilder.group({
      instrumentId: ["", Validators.required],
      quantity: ["", [Validators.required, Validators.min(1)]],
      targetPrice: ["", [Validators.required, Validators.min(0)]],
    });
  }

  ngOnInit() {
    this.loadClientData();
    this.loadPortfolioInstruments();
  }

  loadClientData() {
    this.clientService.getClientData().subscribe(
      (clientData: Client) => {
        this.client = clientData;
      },
      (error) => {
        console.error("Error loading client data:", error);
        this.snackBar.open("Failed to load client data", "Close", {
          duration: 3000,
        });
      }
    );
  }

  loadPortfolioInstruments() {
    this.instrumentService.getInstruments().subscribe(
      (instrumentData: Instrument[]) => {
        this.portfolioInstruments = instrumentData;
      },
      (error) => {
        console.error("Error loading instruments:", error);
        this.snackBar.open("Failed to load instruments", "Close", {
          duration: 3000,
        });
      }
    );
  }

  onSubmit() {
    if (this.sellForm.valid && this.client) {
      const order = new Order(
        this.sellForm.value.instrumentId,
        this.sellForm.value.quantity,
        this.sellForm.value.targetPrice,
        "S",
        this.client.id
      );

      this.fmtsService.executeTrade(order).subscribe(
        (trade: Trade) => {
          console.log("Trade executed:", trade);
          this.snackBar.open("Trade executed successfully", "Close", {
            duration: 3000,
          });
          this.updateClientCash(trade);
          this.sellForm.reset();

          // Reset form validation state
          Object.keys(this.sellForm.controls).forEach((key) => {
            const control = this.sellForm.get(key);
            control?.setErrors(null);
          });
        },
        (error) => {
          console.error("Trade execution failed: ", error);
          this.snackBar.open("Trade execution failed", "Close", {
            duration: 3000,
          });
        }
      );
    }
  }

  private updateClientCash(trade: Trade) {
    if (this.client) {
      this.client.cash += trade.cashValue;
      // In a real application, you would update the client data on the server here
    }
  }
}
